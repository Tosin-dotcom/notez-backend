/*
 * This file is generated by jOOQ.
 */
package com.tosin.notez.tables.records;


import com.tosin.notez.tables.Notes;

import java.beans.ConstructorProperties;
import java.time.LocalDateTime;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NotesRecord extends UpdatableRecordImpl<NotesRecord> implements Record7<UUID, String, String, UUID, LocalDateTime, LocalDateTime, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>notes.id</code>.
     */
    public NotesRecord setId(UUID value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>notes.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>notes.title</code>.
     */
    public NotesRecord setTitle(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>notes.title</code>.
     */
    public String getTitle() {
        return (String) get(1);
    }

    /**
     * Setter for <code>notes.text_content</code>.
     */
    public NotesRecord setTextContent(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>notes.text_content</code>.
     */
    public String getTextContent() {
        return (String) get(2);
    }

    /**
     * Setter for <code>notes.category_id</code>.
     */
    public NotesRecord setCategoryId(UUID value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>notes.category_id</code>.
     */
    public UUID getCategoryId() {
        return (UUID) get(3);
    }

    /**
     * Setter for <code>notes.created_at</code>.
     */
    public NotesRecord setCreatedAt(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>notes.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>notes.updated_at</code>.
     */
    public NotesRecord setUpdatedAt(LocalDateTime value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>notes.updated_at</code>.
     */
    public LocalDateTime getUpdatedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>notes.user_id</code>.
     */
    public NotesRecord setUserId(UUID value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>notes.user_id</code>.
     */
    public UUID getUserId() {
        return (UUID) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<UUID, String, String, UUID, LocalDateTime, LocalDateTime, UUID> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<UUID, String, String, UUID, LocalDateTime, LocalDateTime, UUID> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Notes.NOTES.ID;
    }

    @Override
    public Field<String> field2() {
        return Notes.NOTES.TITLE;
    }

    @Override
    public Field<String> field3() {
        return Notes.NOTES.TEXT_CONTENT;
    }

    @Override
    public Field<UUID> field4() {
        return Notes.NOTES.CATEGORY_ID;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Notes.NOTES.CREATED_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Notes.NOTES.UPDATED_AT;
    }

    @Override
    public Field<UUID> field7() {
        return Notes.NOTES.USER_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getTitle();
    }

    @Override
    public String component3() {
        return getTextContent();
    }

    @Override
    public UUID component4() {
        return getCategoryId();
    }

    @Override
    public LocalDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime component6() {
        return getUpdatedAt();
    }

    @Override
    public UUID component7() {
        return getUserId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getTitle();
    }

    @Override
    public String value3() {
        return getTextContent();
    }

    @Override
    public UUID value4() {
        return getCategoryId();
    }

    @Override
    public LocalDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public LocalDateTime value6() {
        return getUpdatedAt();
    }

    @Override
    public UUID value7() {
        return getUserId();
    }

    @Override
    public NotesRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public NotesRecord value2(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public NotesRecord value3(String value) {
        setTextContent(value);
        return this;
    }

    @Override
    public NotesRecord value4(UUID value) {
        setCategoryId(value);
        return this;
    }

    @Override
    public NotesRecord value5(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public NotesRecord value6(LocalDateTime value) {
        setUpdatedAt(value);
        return this;
    }

    @Override
    public NotesRecord value7(UUID value) {
        setUserId(value);
        return this;
    }

    @Override
    public NotesRecord values(UUID value1, String value2, String value3, UUID value4, LocalDateTime value5, LocalDateTime value6, UUID value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached NotesRecord
     */
    public NotesRecord() {
        super(Notes.NOTES);
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    @ConstructorProperties({ "id", "title", "textContent", "categoryId", "createdAt", "updatedAt", "userId" })
    public NotesRecord(UUID id, String title, String textContent, UUID categoryId, LocalDateTime createdAt, LocalDateTime updatedAt, UUID userId) {
        super(Notes.NOTES);

        setId(id);
        setTitle(title);
        setTextContent(textContent);
        setCategoryId(categoryId);
        setCreatedAt(createdAt);
        setUpdatedAt(updatedAt);
        setUserId(userId);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised NotesRecord
     */
    public NotesRecord(com.tosin.notez.tables.pojos.Notes value) {
        super(Notes.NOTES);

        if (value != null) {
            setId(value.getId());
            setTitle(value.getTitle());
            setTextContent(value.getTextContent());
            setCategoryId(value.getCategoryId());
            setCreatedAt(value.getCreatedAt());
            setUpdatedAt(value.getUpdatedAt());
            setUserId(value.getUserId());
            resetChangedOnNotNull();
        }
    }
}
