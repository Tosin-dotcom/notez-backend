/*
 * This file is generated by jOOQ.
 */
package com.tosin.notez.tables.daos;


import com.tosin.notez.tables.Notes;
import com.tosin.notez.tables.records.NotesRecord;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.13"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class NotesDao extends DAOImpl<NotesRecord, com.tosin.notez.tables.pojos.Notes, UUID> {

    /**
     * Create a new NotesDao without any configuration
     */
    public NotesDao() {
        super(Notes.NOTES, com.tosin.notez.tables.pojos.Notes.class);
    }

    /**
     * Create a new NotesDao with an attached configuration
     */
    @Autowired
    public NotesDao(Configuration configuration) {
        super(Notes.NOTES, com.tosin.notez.tables.pojos.Notes.class, configuration);
    }

    @Override
    public UUID getId(com.tosin.notez.tables.pojos.Notes object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Notes.NOTES.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchById(UUID... values) {
        return fetch(Notes.NOTES.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.tosin.notez.tables.pojos.Notes fetchOneById(UUID value) {
        return fetchOne(Notes.NOTES.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<com.tosin.notez.tables.pojos.Notes> fetchOptionalById(UUID value) {
        return fetchOptional(Notes.NOTES.ID, value);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Notes.NOTES.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByTitle(String... values) {
        return fetch(Notes.NOTES.TITLE, values);
    }

    /**
     * Fetch records that have <code>text_content BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfTextContent(String lowerInclusive, String upperInclusive) {
        return fetchRange(Notes.NOTES.TEXT_CONTENT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>text_content IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByTextContent(String... values) {
        return fetch(Notes.NOTES.TEXT_CONTENT, values);
    }

    /**
     * Fetch records that have <code>category_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfCategoryId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Notes.NOTES.CATEGORY_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>category_id IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByCategoryId(UUID... values) {
        return fetch(Notes.NOTES.CATEGORY_ID, values);
    }

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfCreatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Notes.NOTES.CREATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByCreatedAt(LocalDateTime... values) {
        return fetch(Notes.NOTES.CREATED_AT, values);
    }

    /**
     * Fetch records that have <code>updated_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfUpdatedAt(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(Notes.NOTES.UPDATED_AT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>updated_at IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByUpdatedAt(LocalDateTime... values) {
        return fetch(Notes.NOTES.UPDATED_AT, values);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchRangeOfUserId(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Notes.NOTES.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.tosin.notez.tables.pojos.Notes> fetchByUserId(UUID... values) {
        return fetch(Notes.NOTES.USER_ID, values);
    }
}
